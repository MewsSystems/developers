using Common.Base.Extensions;
using Common.Exceptions;
using Common.HttpClient;
using ExchangeRate.Provider.Cnb.Interfaces;
using ExchangeRate.Provider.Cnb.Models;
using ExchangeRate.Provider.Cnb.Models.Configuration;
using Microsoft.Extensions.Options;
using Serilog;

namespace ExchangeRate.Provider.Cnb.HttpClient;

public class CnbHttpClient : BaseHttpClient, ICnbHttpClient
{
    #region Fields

    private readonly CnbProviderConfiguration _configuration;

    #endregion

    #region Constructors

    /// <summary>
    ///     Initializes a new instance of the <see cref="CnbHttpClient" /> class
    /// </summary>
    /// <param name="httpClientFactory"></param>
    /// <param name="configuration"></param>
    public CnbHttpClient(IHttpClientFactory httpClientFactory, IOptions<CnbProviderConfiguration> configuration) : base(httpClientFactory)
    {
        _configuration = configuration.Value;
    }

    #endregion

    /// <summary>
    ///     Gets exchange rates for the latest date it was generated by the Czech National Bank.
    /// </summary>
    /// <returns></returns>
    /// <exception cref="InvalidContentException">Throws when response from the Czech National Bank is invalid</exception>
    public async Task<List<CnbExchangeRate>> GetExchangeRate()
    {
        var response = await ExecuteHttpRequest(_configuration.Connection?.Url);

        if (string.IsNullOrWhiteSpace(response))
            throw new InvalidContentException($"Received empty response from url '{_configuration.Connection?.Url}'");

        var textRows = response.Split('\n');

        if (textRows.Length < 2)
            throw new InvalidContentException($"Received invalid response from url '{_configuration.Connection?.Url}'");

        // Contains headers of each field in the row
        var columnHeaders = textRows[1].Split(_configuration.DataSourceFields?.Separator, StringSplitOptions.TrimEntries);

        // Position of each header in the row
        var amountIndex = Array.IndexOf(columnHeaders, _configuration.DataSourceFields?.Amount);
        var currencyIndex = Array.IndexOf(columnHeaders, _configuration.DataSourceFields?.Currency);
        var rateIndex = Array.IndexOf(columnHeaders, _configuration.DataSourceFields?.Rate);
        var codeIndex = Array.IndexOf(columnHeaders, _configuration.DataSourceFields?.Code);
        var countryIndex = Array.IndexOf(columnHeaders, _configuration.DataSourceFields?.Country);

        if (OperationUtils.EqualsAny(-1, amountIndex, currencyIndex, rateIndex, codeIndex, countryIndex))
            throw new InvalidContentException($"Received response from '{_configuration.Connection?.Url}' but content has invalid structure");

        var exchangeRates = new List<CnbExchangeRate>();

        foreach (var row in textRows.Skip(2))
        {
            if (string.IsNullOrWhiteSpace(row))
                continue;

            var splitRow = row.Split(_configuration.DataSourceFields?.Separator, StringSplitOptions.TrimEntries);

            if (!decimal.TryParse(splitRow[rateIndex].Replace(".", ","), out var rate) ||
                !int.TryParse(splitRow[amountIndex].Replace(".", ","), out var amount))
            {
                Log.Warning($"Failed to parse rate {splitRow[rateIndex]}");
                continue;
            }

            exchangeRates.Add(new CnbExchangeRate(splitRow[countryIndex], splitRow[currencyIndex], amount, splitRow[codeIndex], rate));
        }

        return exchangeRates;
    }

    protected override void HandleException(Exception ex)
    {
        // Exception is handled in Program.cs
    }
}