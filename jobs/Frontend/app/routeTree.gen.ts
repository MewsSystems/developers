/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MoviesRouteImport } from './routes/movies/route'
import { Route as IndexImport } from './routes/index'
import { Route as MoviesIndexImport } from './routes/movies/index'
import { Route as MoviesSearchImport } from './routes/movies/search'

// Create/Update Routes

const MoviesRouteRoute = MoviesRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MoviesIndexRoute = MoviesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MoviesRouteRoute,
} as any)

const MoviesSearchRoute = MoviesSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => MoviesRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesRouteImport
      parentRoute: typeof rootRoute
    }
    '/movies/search': {
      id: '/movies/search'
      path: '/search'
      fullPath: '/movies/search'
      preLoaderRoute: typeof MoviesSearchImport
      parentRoute: typeof MoviesRouteImport
    }
    '/movies/': {
      id: '/movies/'
      path: '/'
      fullPath: '/movies/'
      preLoaderRoute: typeof MoviesIndexImport
      parentRoute: typeof MoviesRouteImport
    }
  }
}

// Create and export the route tree

interface MoviesRouteRouteChildren {
  MoviesSearchRoute: typeof MoviesSearchRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
}

const MoviesRouteRouteChildren: MoviesRouteRouteChildren = {
  MoviesSearchRoute: MoviesSearchRoute,
  MoviesIndexRoute: MoviesIndexRoute,
}

const MoviesRouteRouteWithChildren = MoviesRouteRoute._addFileChildren(
  MoviesRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/movies': typeof MoviesRouteRouteWithChildren
  '/movies/search': typeof MoviesSearchRoute
  '/movies/': typeof MoviesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/movies/search': typeof MoviesSearchRoute
  '/movies': typeof MoviesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/movies': typeof MoviesRouteRouteWithChildren
  '/movies/search': typeof MoviesSearchRoute
  '/movies/': typeof MoviesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/movies' | '/movies/search' | '/movies/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/movies/search' | '/movies'
  id: '__root__' | '/' | '/movies' | '/movies/search' | '/movies/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MoviesRouteRoute: typeof MoviesRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MoviesRouteRoute: MoviesRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/movies"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/movies": {
      "filePath": "movies/route.tsx",
      "children": [
        "/movies/search",
        "/movies/"
      ]
    },
    "/movies/search": {
      "filePath": "movies/search.tsx",
      "parent": "/movies"
    },
    "/movies/": {
      "filePath": "movies/index.tsx",
      "parent": "/movies"
    }
  }
}
ROUTE_MANIFEST_END */
