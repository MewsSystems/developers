<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Logging.EventSource</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider">
      <summary>The provider for the <see cref="T:Microsoft.Extensions.Logging.EventSource.EventSourceLogger" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider.#ctor(Microsoft.Extensions.Logging.EventSource.LoggingEventSource)">
      <param name="eventSource" />
    </member>
    <member name="M:Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider.CreateLogger(System.String)">
      <summary>Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.</summary>
      <param name="categoryName" />
      <returns>The instance of <see cref="T:Microsoft.Extensions.Logging.ILogger" /> that was created.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.EventSource.EventSourceLoggerProvider.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
      <summary>The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.Keywords">
      <summary>This is public from an EventSource consumer point of view, but since these defintions
            are not needed outside this class.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.Keywords.FormattedMessage">
      <summary>Turns on the 'FormatMessage' event when ILogger.Log() is called. It gives the formatted string version of the information.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.Keywords.JsonMessage">
      <summary>Turns on the 'MessageJson' event when ILogger.Log() is called. It gives  JSON representation of the Arguments.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.Keywords.Message">
      <summary>Turns on the 'Message' event when ILogger.Log() is called. It gives the information in a programmatic (not formatted) way.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.Keywords.Meta">
      <summary>Meta events are events about the LoggingEventSource itself (that is they did not come from ILogger.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions">
      <summary>Extension methods for the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions.AddEventSourceLogger(Microsoft.Extensions.Logging.ILoggingBuilder)">
      <summary>Adds an event logger named 'EventSource' to the factory.</summary>
      <param name="builder">The extension method argument.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
    </member>
  </members>
</doc>