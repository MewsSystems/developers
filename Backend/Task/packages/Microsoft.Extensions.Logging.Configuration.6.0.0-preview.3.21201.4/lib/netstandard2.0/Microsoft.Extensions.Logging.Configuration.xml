<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Logging.Configuration</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1">
      <summary>Allows access to configuration section associated with logger provider.</summary>
      <typeparam name="T">Type of logger provider to get configuration for</typeparam>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1.Configuration">
      <summary>Configuration section for requested logger provider.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory">
      <summary>Allows access to configuration section associated with logger provider.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory.GetConfiguration(System.Type)">
      <summary>Return configuration section associated with logger provider.</summary>
      <param name="providerType">The logger provider type</param>
      <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the given <paramref name="providerType" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Configuration.LoggerProviderOptions">
      <summary>Provides a set of helpers to initialize options objects from logger provider configuration.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Configuration.LoggerProviderOptions.RegisterProviderOptions``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>Indicates that settings for <typeparamref name="TProvider" /> should be loaded into <typeparamref name="TOptions" /> type.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to register on.</param>
      <typeparam name="TOptions">The options class</typeparam>
      <typeparam name="TProvider">The provider class</typeparam>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2">
      <typeparam name="TOptions" />
      <typeparam name="TProvider" />
    </member>
    <member name="M:Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2.#ctor(Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration{`1})">
      <param name="providerConfiguration" />
    </member>
    <member name="T:Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions">
      <summary>Extension methods for setting up logging services in an <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions.AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder)">
      <summary>Adds services required to consume <see cref="T:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory" /> or <see cref="T:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1" /></summary>
      <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to register services on.</param>
    </member>
    <member name="T:Microsoft.Extensions.Logging.LoggingBuilderExtensions">
      <summary>Provides extension methods for setting up logging services in an <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
      <summary>Configures logger filter options from an instance of <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.</summary>
      <param name="builder">The logging builder to configure logger filter options for.</param>
      <param name="configuration">The filter options to add.</param>
      <returns>The logging builder with filter options configured.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddProvider(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.ILoggerProvider)">
      <summary>Adds the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> to the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that calls can be chained.</summary>
      <param name="builder">The logging builder to add the <paramref name="provider" /> to.</param>
      <param name="provider">The logger provider to add to the <paramref name="builder" />.</param>
      <returns>A logging builder that you can chain additional calls to.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.ClearProviders(Microsoft.Extensions.Logging.ILoggingBuilder)">
      <summary>Removes all logger providers from <paramref name="builder" />.</summary>
      <param name="builder">The logging builder to remove logging providers from.</param>
      <returns>The logging builder with logger providers removed.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.Configure" />
    <member name="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.SetMinimumLevel(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.LogLevel)">
      <summary>Sets a minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> requirement for log messages to be logged.</summary>
      <param name="builder">The logging builder to set the minimum level on.</param>
      <param name="level">One of the enumeration values to set as the minimum logging severity level.</param>
      <returns>The logging builder with minimum log level set.</returns>
    </member>
  </members>
</doc>